---
layout: post
title: 'Osa 1 - Komentorivi'
date: 1969-12-28 00:04:00 +0200
permalink: /komentorivi/
tag: material
---

Tästä alkaa ensimmäisen viikon materiaali. Ensimmäisen viikon keskeisin tavoite on tutustua komentoriviin Unix-tyyppisessä ympäristössä.

<h2>Tämän osan oppimistavoitteet</h2>

Tämän viikon tavoitteina on, että opiskelija

- Ymmärtää graafisen ja tekstikäyttöliittymän erot.
- Osaa navigoida tiedostohallinnassa komentorivillä.
  - ls ja vivut -a ja -l
  - cd
  - mkdir
- Osaa luoda ja avata, tallentaa ja sulkea tiedoston jollain komentorivin tekstieditorilla.
  - nano
  - vim
- Osaa käyttää suhteellisia ja absoluuttisia polkuja viittaamaan tiedostoihin ja kansioihin.
- Ymmärtää kotihakemiston ja juurihakemiston eron.
- Osa kopioida ja leikata tiedostoja ja kansioita komentoriviltä
- Osaa antaa useita tiedostoja komentoriville argumenttina \*-villikortin avulla
- Osaa käsitellä tekstiä komentorivillä
  - cat
  - tail ja head, myös n-vivun kanssa
  - Grep
- Tulosteen käsittely
  - Putki \|
  - \> ja \>\>
- Osaa luoda SSH-avainparin, sekä muodostaa SSH-yhteyden toiseen järjestelmään.
- Osaa hakea internetistä sisältöä komentorivillä
  - Wget
- Osaa lukea komennon ls -l tulostusta.
- Osaa muokata tiedoston ja kansion oikeuksia.
  - chmod
- Osaa kirjoittaa yksinkertaisen bash-skriptin ja ajaa sen.
- Ymmärtää sudo-komennon merkityksen ja vaarat.

<h2>Komentorivi</h2>

Tietokoneet ovat erottamaton osa nyky-yhteiskuntaa, ja jokainen tulee melko varmasti päivittäin käyttäneeksi useampaa erilaista ja eri kokoista tietokonetta. Tietokone on myös tietojenkäsittelytieteilijän tärkein työkalu.

Olet luultavasti varsin tottunut käyttämään tietokoneita tietyllä tavalla. Esimerkiksi tiedostojen etsiminen ja tarkasteleminen on melko varmasti mielestäsi helppoa: Osaat siirtyä kansioon kaksoisklikkaamalla sitä, avata tiedoston sopimalla ohjelmalla tai klikata tiedostoa oikealla näppäimellä ja valita vaihtoehdoista "poista" tuhotaksesi sen.

Edellä mainitussa tapauksessa kyseessä on _graafinen käyttöliittymä_: Näet edessäsi kaikki toimintovaihtoehdot, ja valinnat tehdään valikoista klikkailemalla, ja voit esimerkiksi myös vain raahata tiedostoja ja kansioita haluamiisi paikkoihin. Komentorivi, eli terminaali sen sijaan on _tekstikäyttöliittymä_. Tällöin tietokoneelle annetaan käskyjä kirjoittamalla, komentojen ja näppäinyhdistelmien avulla. Vaihtoehtoja ei esitetä samalla tavalla, eikä hiirtä käytetä juuri ollenkaan.

<div class="note">
Rakkaalla lapsella on monta nimeä: Komentorivi on englanniksi command line tai terminal. Siihen viitataan joskus myös sanalla shell tai console.
</div>

Aikaisemmin tekstikäyttöliittymä oli ainoa mahdollisuus hallinnoida konetta. Vaikka nykyään graafiset käyttöliittymät ovat yleisiä ja toimivia, komentorivi on koodareille edelleen erittäin tärkeä työkalu. Monille koodareiden käyttämille ohjelmille ei ole edes olemassa graafista käyttöliittymää, vaan niitä käytetään pelkästään komentoriviltä.

Aloitetaan avaamalla komentorivi. Ubuntussa ja useissa Linux-käyttöjärjestelmissä voit tehdä sen painamalla `CTRL + ALT + T`. MacOS:issa kirjoita Spotlightiin (`⌘ + Välilyönti`) "terminal" ja paina Enter. Voit myös etsiä tietokoneen sovelluksista sanalla "terminal". Eteesi tulisi joka tapauksessa avautua musta laatikko, jossa vilkkuu kursori ja lukee jotain seuraavanlaista (esimerkki on Linux-koneesta, macOSissa terminaali on hieman erinäköinen)

```bash
tunnus@tietokone:~$
```

`@` merkin edessä oleva teksti on käyttäjänimesi tietokoneella, ja sen jälkeen, ennen kaksoispistettä näkyvä teksti on tietokoneen nimi. Suoritettavan komennon voi kirjoittaa kursorin osoittamaan kohtaan, ja ajaa painamalla <kbd>ENTER</kbd>.

<div class="note">
Huomaa, että netistä löytyvissä ohjeissa on joskus <code>$</code>-merkki komennon edessä. Se symboloi sitä, että komento tulee ajaa nimenomaan komentorivillä normaalikäyttäjänä, eikä esimerkiksi jonkin ohjelmointikielen tulkissa. Se <strong>ei</strong> tarkoita, että käyttäjän tulisi laittaa dollarimerkki osaksi käskyä.
</div>

![Terminaali macOSissa](/assets/mac_terminal.png)

![Terminaali linuxissa](/assets/ubuntu_terminal.jpg)

Yllä näkyy macOSin ja Ubuntun oletus-terminaalit.

<h2>Komennot</h2>

Tekstikäyttöliittymät toimivat komentoperusteisesti. Komento tarkoittaa kirjoitettua käskyä: komennolla tietokone saadaan tekemään jotain.

Itse komento määrittää, minkä operaation koneen halutaan suorittavan. Se voi olla tiedoston kopiointa, yhteyden ottamista, tai tietyn ohjelman ajamista. _Vipu_, englanniksi _option_ tai _flag_, tarkoittaa komennolle annettavaa parametria, jonka avulla komennon toiminnalle voidaan määrittää ylimääräisiä asetuksia. Joillekin vivuille tulee antaa parametreja, toisille ei. Komento tai ohjelma itse määrittää, minkälaisia vipuja sille on mahdollista antaa.

Argumentti taas on käyttäjän vapaasti määrittelemä arvo, esimerkiksi tiedoston nimi. Argumentti on usein komennon toiminnan kohde.

Vivuille määritellään joskus kaksi muotoa: lyhyt, eli yleensä yhden kirjaimen pituinen, ja pitkä muoto. Lyhyt muoto annetaan yhden, ja pitkä muoto kahden väliviivan kanssa.

Seuraavassa on esimerkkejä komennoista, joissa niiden toimintaa on muutettu vipujen avulla:

```bash
ls -la Downloads/tiedosto
```

`ls` on yleisesti käytetty komento, johon tutustumme tässä osassa. Oletuksena se näyttää nykyisen kansion tiedostojen nimet. Vivut `-a` ja `-l` (huomaa, miten kaksi vipua annetaan komennolle ylläolevassa esimerkissä) vaikuttavat siihen, mitä tietoa `ls` näyttää. Kun komennolle `ls` annetaan argumenttina jokin polku kansioon, se näyttää tietoa vain kyseisen kansion sisällöstä. Tällä tavalla vipujen ja argumenttien avulla voidaan muuttaa ja tarkentaa komennon toimintaa.

```bash
git add -p
```

Kun halutaan kutsua komentoriviltä jotain ohjelmaa, tulee ensimmäisenä komentoon kirjoittaa ajettavan ohjelman nimi. Yllä näkyvässä esimerkissä kutsutaan ohjelmaa nimeltä _Git_, johon tutustumme paremmin ensi viikolla. Näin ollen ensin kirjoitetaan `git`. Ohjelma määrittelee erilaisia komentoja eri toiminnillaisuuksille. Tässä esimerkissä ajettavan komennon nimi on `add`, ja sille annetaan sen toimintaa muuttava vipu `-p`. Sinun ei tarvitse ajaa kyseistä koodia, tutustumme Gittiin vasta seuraavassa osassa.

Kutsuttava ohjelma määrittää, mitä komentoja se tarjoaa. Usein mahdolliset komennot on mahdollista nähdä komentoriviltä lisäämällä ohjelman perään vivun `--help` tai lyhyemmin `-h`. Tarkan ohjeen ohjelman käytöstä saa komennolla `man` ja antamalla parametriksi ohjelman nimen (esimerkiksi siis `man git`). `man`-sivut eivät ole järin aloittelijaystävällisiä, mutta tarjoavat yleensä kattavimman dokumentaation tietystä ohjelmasta.

Huomaa, että jos haluat antaa komennolle argumentiksi jotain, mikä sisältää välilyönnin, se on annettava lainausmerkkien sisällä. Muuten komentorivillä tulkitaan, että erilliset sanat ovat omia komentojaan, eivätkä osa yhtä argumenttia.

```
ls "olen vähän hassusti nimetty tiedosto" # tai ls 'olen vähän hassusti nimetty tiedosto'
```

<div class="note">
Voit selata `man`-sivua nuolinäppäimellä, ja postua painamalla <code>q</code>.
</div>

<div class="note">
Komennot voivat vaikuttaa aluksi hieman erikoisesti nimetyiltä, sillä komennot ovat usein lyhenteitä englanninkielisistä sanoista. Komento man ei tarkoita kuitenkaan miestä, vaan on lyhenne sanasta "manual", ls on lyhenne sanasta "list", ja niin edelleen. Materiaalissa on mainittu joitain komentojen lyhenteitä, tarkoituksena avata komentojen merkityksiä.
</div>

<h2> Tiedostohallinta komentoriviltä</h2>

Komentoriviltä voi selata ja hallinnoida tiedostoja samaan tapaan kuin graafisesta ympäristöstä.

Avaa graafinen tiedostoselain. Se löytyy Ubuntu-ympäristössä ohjelmana nimeltä "Files" tai kirjoittamalla komentoriville `nautilus` ja painamalla <kbd>ENTER</kbd>. MacOSissa avaa finder, ja paina näppäinyhdistelmää `Shift + Cmd + H`. Tiedostoselaimessa tulisi näkyä _kotihakemistosi_. Kotihakemisto tarkoittaa hakemistoa, joka sisältää kaikki tietyn käyttäjän henkilökohtaiset tiedostot ja kansiot. Mikäli olet laitoksen koneella, kotihakemistosi sisältää samat asiat riippumatta siitä millä _fyysisellä_ koneella satut olemaan: tietokoneen sisältö haetaan toisaalta. Jos taas luet materiaalia omalta koneeltasi, kotihakemistossasi on vain ne asiat mitkä sillä fyysisellä koneella on.

Huomaa, että jos avasit graafisen tiedostoselaimen komentoriviltä, komentorivi jäi ikään kuin lukkoon, ja sillä ei voinut tehdä muuta ellei graafista ohjelmaa suljeta. Voit aina sulkea käynnissä olevan ohjelman painamalla näppäinyhdistelmää <kbd>CTRL + C</kbd>. Joskus kerta ei riitä, ja voit huoletta painaa sitä monta kertaa.

<div class="note">
Koska yhdistelmällä CTRL + C on terminaalissa erityinen merkitys, joudut Linuxissa käyttämään yhdistelmää CTRL + SHIFT + C terminaalista maalatun tekstin kopioimiseen, sekä CTRL + SHIFT + V tekstin liittämiseen.
</div>

Kotihakemistosi sisältää luultavasti paljon sälää, esimerkiksi _Downloads_ ja _Documents_ -nimiset kansiot. Haluamme nähdä samat asiat komentoriviltä, joten avaa viereen komentorivi, kirjoita siihen komento `ls`, ja paina <kbd>ENTER</kbd>. Enteriä painamista ennen tilanne näyttää suurinpiirtein tältä

```bash
tunnus@tietokone:~$ ls
```

`ls` listaa hakemistot ja kansiot joita hakemistosta löytyy. Tulos on likimain sama kuin miten graafinen tiedostoselain näyttää kotihakemiston tiedostot. Oletuksena uuden komentorivin avaaminen avaa sen nimenomaan kotihakemistoon, joten tarvitsemme tavan vaihtaa aktiivista kansiota jotta voimme vierailla muissa kansioissa ja tarkastella niiden sisältöjä. Tarvittava komento on `cd`, eli **c**hange **d**irectory. `cd`-komennolle annetaan parametrina kansio, johon halutaan siirtyä. Mikäli et anna `cd`:lle argumentteja, se siirtää sinut kotihakemistoosi.

Navigoi _Downloads_-kansioon antamalla komento `cd Downloads`. Kansion nimi tulee aina olla täsmälleen kirjoitettu, sillä isoilla ja pienillä kirjaimilla kirjoitetut nimet ovat erilaisia. Muutos näkyy heti komentorivillä, sillä se näyttää nyt kutakuinkin tältä:

```bash
tunnus@tietokone:~/Downloads$
```

`:`-merkin jälkeinen osa kertoo siis aktiivisen kansion. `~` viittaa käyttäjän kotihakemistoon.

Komenna jälleen `ls`. Vaihdoimme aktiivista hakemistoa, ja koska `ls` kertoo aina aktiivisen kansion sisällön, on tulos nyt eri. Komentorivi toimii siis loppujen lopuksi hyvin samalla tavalla kuin graafinen tiedostoselain: `cd` vastaa kansiota klikkaamista, ja `ls` näyttää hakemiston tiedostot ja kansiot.

Komento `ls` voi näyttää myös tarkempaa tietoa.
Pidä graafinen tiedostoselain vierellä, ja aja komentorivillä kotihakemistossa komento `ls -a`. Huomaa, miten komentorivillä näkyy nyt paljon enemmän tiedostoja, kuin graafisessa ympäristössä. Tämä johtuu vivusta `-a`. Sen avulla on mahdollista kaikki tiedostot, myös _piilotetut_ tiedostot ja kansiot.

Unix-ympäristössä piilotettu tiedosto tai kansio tarkoittaa tarkoittaa sellaisia, joiden nimi alkaa pisteellä, esimerkiksi `.config`. Tällaisia ovat usein tiedostot, jotka sisältävät joitain asetuksia tai tietoja, joita käyttäjän tarvitsee harvoin muuttaa. Linuxissa piilotetut tiedostot on mahdollista nähdä painamalla graafisessa tiedostoselaimessa `CTRL + h`, macOSissa `cmd + SHIFT + .`.

<div class="exercise">
<h3> <span class="points">5%</span> Tehtävä nro 1</h3>
Voit merkata tämän tehtävän tehdyksi, kun olet käynyt läpi alun esimerkin graafisen ja tekstikäyttöliittymän eroista tehden samalla esimerkit komentorivillä.
</div>

<div class="exercise">

<h3> <span class="points">5%</span> Tehtävä nro 2</h3>
 Graafisessa tiedostoselaimessa voi luoda kansioita käyttämällä hiiren oikeaa näppäintä. Unix-tyyppisissä järjestelmissä tämä tapahtuu komennolla <code>mkdir</code>. Kyseessä on jälleen lyhenne, vähemmän yllättäen sanoista <i>make directory</i>. Komennolle annetaan argumenttina luotavan kansion nimi. Luo kansio nimeltä <b>lapio</b> kotihakemistoosi. Varmista että loit kansion komennolla <code>ls</code>.
</div>

Jos olet tottunut käyttämään graafista käyttöliittymää, mietit luultavasti nyt, miten hidasta ja raskasta komentorivin käyttäminen varmasti on. Kyseessä on luonnollisesti tottumiskysymys, mutta sen lisäksi komentorivillä on olemassa kirjoittamista nopeuttava seikka: tab-täydennys. Tab-täydennys täydentää nykyisen kansion tiedostojen nimiä parametreiksi sekä (joskus, ohjelmasta riippuen) ohjelmien komentoja.

Kokeile tab-täydennystä kirjoittamalla kotihakemistossa `cd D`, ja painamalla sen jälkeen tab-näppäintä (löytyy näppämistöstä caps-lockin yläpuolelta) pari kertaa. Terminaaliin tulostuu kaikki kotihakemiston D-kirjaimella alkavat hakemistot, ainakin siis "Downloads" ja "Documents". Oletetaan, että haluat siirtyä Downloads-kansioon. Tällöin riittää kirjoittaa cd-komennon parametriksi vain `Dow` ja painaa tab-näppäintä, jonka jälkeen Downloads-kansion nimi täydennetään komennon parametriksi (olettaen että kotihakemistossasi ei ole mitään muuta kansiota, jonka nimi alkaisi merkkijonolla `Dow`).

Toinen nopeuttava apu on vanhojen komentojen selaaminen: voit tehdä sen painamalla nuolinäppäimiä ylös- ja alaspäin. Kun olet kirjoittamassa komentoa, et voi käyttää kursoria siirtyäksesi tekstissä taaksepäin: voit liikkua komentorivin tekstissä esimerkiksi vasemmalla ja oikealla nuolinäppäimellä.

<h2> Tekstinkäsittely</h2>

Gedit on yksinkertainen graafinen tekstieditori, jolla voi muokata mitä tahansa teksitiedostoja. Löydät geditin Linuxissa esimerkiksi kirjoittamalla "gedit" Launcheriin, johon pääset painamalla "windows-nappia". MacOSilla kannattaa käyttää ohjelmaa TextEdit, jotta voit määrittää tiedoston tallennuspaikan ja löydät sen helposti jälkeenpäin. Avaa graafinen tekstieditori ja luo sillä `esimerkki.txt`-niminen tiedosto aiemmin tehtyyn _lapio_-hakemistoosi. Lisää sen jälkeen tiedostoon jotain tekstiä.

Tehtyäsi `esimerkki.txt`-tiedoston navigoi komentorivillä `lapio`-kansioon, ja avaa se komentamalla `nano esimerkki.txt`. Nano on tekstieditori, jossa on tekstikäyttöliittymä, eli jota käytetään suoraan komentoriviltä. Tämä tarkoittaa esimerkiksi, että muokkausikkunaa ei suljeta raksista, kuten vaikka geditissä, vaan se tehdään näppäinyhdistelmällä `CTRL + X`. Jos tiedostoon on tehty muutoksia, on varmistettava halutaanko ne tallentaa vai ei (vastaus on `y`es tai `n`o). Viimeisenä editori varmistaa, minkä nimisenä tiedosto tallennetaan.

<div class="note">
Jos saat virheviestin <code>nano: command not found</code>, nanoa ei ole asennettu koneellesi. Helpoiten sen saa asennettua pakettienhallintajärjestelmän avulla. Katso osan lopusta linkki pakettienhallintajärjestelmien käyttöohjeisiin.
</div>

<div class="exercise">
<h3> <span class="points">5%</span> Tehtävä nro 3</h3>

Ota selvää miten <code>nano</code> toimii käyttämällä Googlea tai <code>man</code>-komentoa. Selvitä seuraavat asiat:

<ul>
<li> Miten voin tallentaa tiedoston sulkematta nanoa</li>
<li> Miten voin kopioida ja liittää nanoon</li>
</ul>

Tarkista, että osaat tehdä nämä asiat: Avaa tiedosto <code>eximerkki.txt</code>, lisää sinne tekstiä ja tallenna. Avaa sen jälkeen tiedoston jollain tekstieditorilla varmistaaksesi, että sisältö on tallentunut.

</div>

<div class="exercise">
<h3><span class="points">5%</span> Tehtävä nro 4</h3>

Vastaavanlainen, mutta paljon enemmän ominaisuuksia sisältävä komentolinjalla toimiva tekstieditori on <a href="https://en.wikipedia.org/wiki/Vim_(text_editor)">vim</a>. Se on kuitenkin myös huomattavasti monimutkaisempi käyttää. Ota selvää vimistä seuraavat asiat:

<ul>
<li>Mitä ovat "insert mode" ja "command mode"</li>
<li>Miten niiden välillä vaihdetaan</li>
<li>Miten saat vimin suljettua <br></li>
</ul>
</div>

<h2> Polut</h2>

Polku (englanniksi _path_) tarkoittaa osoitetta tiettyyn tiedostoon tai kansioon. Se koostuu lähinnä kansioiden ja tiedostojen nimistä ja `/`-merkistä. Polkuja käytetään komentojen argumenteissa.

Polku voi olla _suhteellinen_ tai _absoluuttinen_: suhteellinen polku merkitään suhteessä nykyiseen kansioon, absoluuttinen suhteessa järjestelmän _juurikansioon_. Juurikansio sisältää kaikki tietokoneen tiedostot, eikä sitä tule sekoittaa käyttäjäkohtaiseen kotihakemistoon. Juurikansio sisältää siis kaikkien käyttäjien kotihakemistot.

<div class="warning">
Ole varovainen juurihakemiston kanssa! Se sisältää kaikenlaista tärkeää, älä siis muuta turhaan tiedostoja tai poista kansioita juuressa.
</div>

Absoluuttinen polku alkaa aina `/`-merkillä, sillä juurikansion absoluuttinen polku on `/`. Jos polkua ei aloita merkillä `/`, järjestelmä luulee että viitataan kansioon joka on nykyisessä hakemistossa. Nykyisen kansion absoluuttisen polun näkee komennolla `pwd` (**p**rint **w**orking **d**irectory). Kotihakemiston absoluuttinen polku on Linuxissa yleensä `/home/tunnus/` ja macOSissa `/Users/tunnus/`. Siihen voidaan myös viitata merkillä `~`. Esimerkiksi absoluuttinen polku kotihakemiston Downloads-kansioon olisi Linuxissa `/home/tunnus/Downloads` tai `~/Downloads`.

Suhteellisissa poluissa käytetään usein merkkejä `.` ja `..`. Yksi piste `.` viittaa nykyiseen kansioon, kaksi pistettä `..` viittaa edelliseen kansioon tai ylä- eli äitikansioon. Esimerkiksi komennolla `cd ../..` siirryttäisiin kaksi kansiota "ylöspäin". Kotihakemistosta suhteellinen polku kansioon Downloads on `./Downloads` tai pelkkä `Downloads`.

Tässä vielä esimerkki absoluuttisista ja suhteellisista poluista:

Oletetaan, että olet ladannut Downloads-kansioon kissakuvia jokaiselle vuoden kuukaudelle niin, että jokaisen kuukauden kuvat ovat omassa kansiossaan. Sen jälkeen olet siirtynyt komentorivillä "toukokuu"-nimiseen kansioon, jonka polku on `~/Downloads/kissakuvia/toukokuu/`. Voit nyt viitata toukokuu-kansion sisältä `Downloads`-kansioon polulla `..`, `~/Downloads` tai `/home/tunnus/Downloads` Linuxilla ja `/Users/tunnus/Downloads` macOSilla. Jos haluaisit viitata toukokuu-kansiosta esimerkiksi marraskuu-kansioon, voit tehdä sen polulla `../marraskuu/`. Kauttaviiva polun lopussa alleviivaa, että kyseessä on kansio, mutta se ei ole välttämätön.

<div class="note">
Muista, että komentorivi näyttää sinulle koko ajan nykyisen kansiosi polun suhteessa kotihakemistoosi. Tämä helpottaa tiedostojen seassa navigointia ja polkujen kirjoittamista.
</div>

<div class="exercise">
<h3> <span class="points">5%</span> Tehtävä nro 5</h3>

Harjoitellaan tässä tiedostohallintaa komentoriviltä.
Luo ensin kuvaa vastaava kansiorakenne:
<img src="/assets/lapio_start.png" alt="Alkutilanne"/>

<p>
Oheisessa kansiorakenteessa siis <code>koulu</code>-kansio sisältää kolme kansiota: <code>lapio</code>, <code>ohpe</code> ja <code>ohja</code>, joista jokainen sisältää puolestaan vähintään yhden tiedoston.
Luo ensin <code>koulu</code>-kansio, ja siirry sen jälkeen sen sisään. Tämän jälkeen pyri luomaan tiedostot ilman, että siirryt pois kansiosta <code>koulu</code>.
</p>

<p><i>Vinkki: voit luoda tekstitiedoston avaamalla sen tekstieditorilla, tai komennolla <code>touch</code>.</i></p>

<p>Tarkista, että olet luonut oikeat kansiot ja tiedostot <code>ls</code>-komennolla.</p>

</div>
<h2> Tiedostojen siirtäminen ja uudelleennimeäminen</h2>

Graafisessa ympäristössä kopiointi onnistuu näppäinyhdistelmällä <kbd>CTRL + C</kbd>, leikkaus yhdistelmällä <kbd> CTRL + X</kbd> ja liittäminen yhdistelmällä <kbd>CTRL + V</kbd>. Katsotaan miten vastaavat asiat saadaan tehtyä komentorivillä.

Kopiointia varten on komento `cp` eli <b>c</b>o<b>p</b>y. Se ottaa argumenteiksi kopioitavan tiedoston polun ja uuden tiedoston polun: `cp esimerkki.txt esimerkki2.txt` kopioisi siis `esimerkki.txt`:n `esimerkki2.txt` nimiseksi tiedostoksi samaan kansioon. Huomaa, että polkujen avulla voit viitata tiedostoihin tai kansioihin eri hakemistossa: `cp esimerkki.txt ~/Documents/esimerkki2.txt` kopioisi tiedoston suoraan `Documents`-kansioon nimellä `esimerkki2.txt`.

Tiedostoja voi siirtää käyttäen `mv`-komentoa, <b>m</b>o<b>v</b>e. Komento toimii samalla tavalla kuin `cp`, paitsi että alkuperäinen tiedosto poistetaan, ja jää vain uusi tiedosto. Tämä vastaa graafisen käyttöliittymän "leikkaa"-toimintoa. Komennolla `mv` voi myös uudelleennimetä tiedostoja: jos toisena argumenttina annettu polku viittaa samaan kansioon kuin ensimmäinen polku, kopion nimeäminen ja alkuperäisen tiedoston poistamisen tuloksena on uudelleennimetty tiedosto.

Esimerkkejä `mv`:n toiminnasta:

`mv esmerkki.txt esimerkki.txt` uudelleennimeää tiedoston `esmerkki.txt` tiedostoksi `esimerkki.txt`.

`mv esimerkki.txt ~` siirtää tiedoston `esimerkki.txt` nykyisestä kansiosta kotihakemistoon.

`mv esmerkki.txt ~/esimerkki.txt` muuttaa nykyisen kansion tiedoston `esmerkki.txt` nimeksi `esimerkki.txt` ja siirtää sen kotihakemistoon.

`mv ~/esimerkki.txt ~/Downloads/` siirtää tiedoston `esimerkki.txt` kotihakemistosta Downloads-kansioon.

<div class="exercise">
<h3> <span class="points">5%</span> Tehtävä nro 6</h3>

Tämä on jatkoa edelliseen tehtävään.
Kun olet luonut alkutilanteen, muuta se komennoilla <code>mv</code> ja <code>cp</code> seuraavan näköiseksi:

Huomaa, että kiusallinen kirjoitusvirhe tiedoston <code>kmntorivi.txt</code> nimessä on korjattu. Tiedosto <code>javasta.txt</code> on uudelleennimetty ja siirretty kansioon <code>ohpe</code>.
<img src="/assets/lapio_goal.png" alt="Lopputilanne"/>

</div>

<div class="exercise">
<h3><span class="points">5%</span> Tehtävä nro 7</h3>

Tiedostoja voidaan poistaa komennolla <code>rm</code>, eli <b>r</b>e<b>m</b>ove. Käyttäen komentoriviä, poista edellisessä tehtävässä luomasi tiedostot. Selvitä sitten, miten voit poistaa hakemiston komentoriviltä, ja poista koko <code>koulu</code>-hakemisto. <div class="warning">Huomaa, että kun poistat jotain komentoriviltä, se ei siirry roskakoriin vaan poistuu heti, ole siis varovainen.</div>

</div>

<h2> Villikortit</h2>

Sekä `mv` että `cp` (ja melkein kaikki muutkin Unix-tyyppisen ympäristön komennot) tukevat ns. villikortteja, joiden avulla on kätevää suorittaa operaatioita useammalle tiedostolle samaan aikaan. Ehkä yleisin villikortti, eli `*`, toimii siten, että se vastaa mitä tahansa määrää mitä tahansa merkkiä. Esimerkiksi komento `mv *.txt esimerkki/` siirtäisi kaikki nykyisen kansion `.txt`-päätteiset tiedostot esimerkki-nimiseen kansioon nykyisen kansion alla.

```bash
tunnus@hal9000:~/esimerkki$ ls
kohde kuva.png muistio.txt toinen.png
tunnus@hal9000:~/esimerkki$ mv *.txt kohde/
tunnus@hal9000:~/esimerkki$ ls
toinen.png
tunnus@hal9000:~/esimerkki$
```

Samoin `mv test* tests/` siirtäisi kaikki `test`-alkuiset tiedostot ja hakemistot `tests`-nimiseen kansioon.

<div class="exercise">
<h3> <span class="points">10%</span> Tehtävä nro 8</h3>
Hyödyllinen villikortteihin liittyvä tutoriaali löytyy <a href="http://www.linfo.org/wildcard.html">täältä</a>. Tee kansio nimeltä <i>työväline</i> kotihakemistoosi, ja lataa sinne internetistä kaksi kuvaa, joista toinen on <code>jpg</code>-muotoinen, ja toinen <code>png</code>-muotoinen. Lisää sen lisäksi kansioon joitain tiedostoja, esimerkiksi nimillä <code>tiedosto.txt</code> ja <code>en_ole_kuva.txt</code>. Luo lopuksi kansio nimeltä <code>kuvat</code> ja kopioi sinne tutoriaalia hyödyntäen jokainen kuva.
</div>

Kuten mainittu, villikortit toimivat myös muissa komennoissa. Esimerkiksi hyödyllistä `tree`-komentoa, joka näyttää kansioiden alikansiot ja tiedostot puumaisena rakenteena, voi käyttää näyttämään vain tietyillä kirjaimilla alkavat kansiot seuraavasti.

```
tunnus@hal9000:~/esimerkki$ ls
kohde kohteeton muistio.txt
tunnus@hal9000:~/esimerkki$ tree
.
├── kohde
│   └── olen_tiedosto_kansion_kohde_sisällä.txt
├── kohteeton
│   └── olen_tiedosto_kansion_kohteeton_sisällä.txt
└── muistio.txt

2 directories, 3 files
tunnus@hal9000:~/esimerkki$ tree koh*
kohde
│   └── olen_tiedosto_kansion_kohde_sisällä.txt
kohteeton
└── olen_tiedosto_kansion_kohteeton_sisällä.txt

0 directories, 2 files
```

<h2> Muita hyödyllisiä komentoja</h2>

Joskus on hyödyllistä pystyä tarkastelemaan tekstitiedostoja suoraan komentoriviltä avaamatta erillistä editoria. Helpoin komento tätä varten on `cat` (katenoi), joka tulostaa suoraan tiedoston sisällön:

```
tunnus@hal9000:~/esimerkki$ cat esimerkki.txt
olen
esimerkkitiedoston
sisältö
```

Jos tiedosto on kovin iso, tulee rivejä paljon. Usein niistä tarvitsee vain alun tai lopun, jossa auttavat komennot `head` ja `tail`. Molemmat komennot tulostavat vakiona 10 riviä, mutta sitä voi vaihtaa `-n`-vivulla. Esimerkiksi vain ensimmäisen ja viimeisen rivin saa näin:

```
tunnus@hal9000:~/esimerkki$ tail -n 1 esimerkki.txt
olen
tunnus@hal9000:~/esimerkki$ head -n 1 esimerkki.txt
sisältö
```

Tässä siis vivulle `-n` annettiin argumenttina luku 1.

On myös mahdollista etsiä tiettyjä rivejä tiedostoista. Tähän löytyy erittäin hyödyllinen `grep`-komento (search <b>g</b>lobally for a <b>r</b>egular <b>e</b>xpression and <b>p</b>rint), joka antaa käyttäjän filtteröidä rivejä tiedostoista annettujen ehtojen perusteella. Grep toimii perustapauksessa niin, että se palauttaa kaikki **rivit** joissa esiintyy annettu merkkijono juuri sellaisenaan kun se annettiin. Yksinkertaisimmillaan sen toiminta on siis seuraavanlaista:

```
tunnus@hal9000:~/esimerkki$ cat päiväkirja.txt
Lokakuun kuudes päivä.

Tämä on päiväkirjani, se sisältää paljon salaisuuksia.

Tämä rivi taas on vähemmän salainen.

tunnus@hal9000:~/esimerkki$ grep "salai" päiväkirja.txt
Tämä on päiväkirjani, se sisältää paljon salaisuuksia.
Tämä rivi taas on vähemmän salainen.
```

Huomaa, että osuma löytyy, vaikka se oli sanan keskellä. Useimmissa ympäristöissä komento myös maalaa (järjestelmästä riippuen) täsmätyn osan tiedostosta esimerkiksi punaisella:
![grep-esimerkki](/assets/päiväkirja.png){:class="img-responsive"}

<div class="exercise">
<h3> <span class="points">10%</span> Tehtävä nro 9</h3>
Ilman erillisiä vipuja <code>grep</code> ei kohtele kirjaimia samana, jos ne ovat eri kokoisia. Esimerkiksi "a" ja "A" ovat sille siis erilaisia kirjaimia. Tarkastele <code>grep --help</code> apusivun tulosta, ja ota selvää miten pääset eroon kirjainkoon erottelusta. Ota myös selvää esimerkiksi Googlettaen, miten saat haettua vain merkkijonoja, jotka ovat rivin alussa. Tarkista, että osaat tehdä tämän. Voit tehdä sen kirjoittamalla tiedostoon esimerkiksi
</div>
```
Unix
Linux
macOS
UNiX
päivänkakkara-unix
unIX
Käyttöjärjästelmänä unix
UNIX
unix
unisport
```
<div class="exercise">
ja tarkistamalla että saat <code>grep</code>in avulla valittua oikeat sanat.
</div>

<div class="note">
Etsiessäsi tietoa netistä komennoista ja niiden toiminnoista, varmista aina, että ymmärrät varmasti lukemasi testaamalla mahdollisuuksien mukaan niiden toiminnallisuutta. Tällä tavalla opit helpommin, ja huomaat nopeammin mahdolliset väärinymmärrykset.
</div>

Edellä mainitut ovat tärkeitä komentoja komentorivillä työskentelijän arsenaalissa, mutta niiden hyöty tulee kunnolla esille vasta kun ne yhdistetään muihin komentoihin. Komentorivillä komentojen yhdistäminen tapahtuu yleensä joko putkella `|`, tai nuolella `>`. Tarkastellaan seuraavaksi näitä operaattoreita.

Putki siirtää eteenpäin ensimmäisen komennon tulosteen toiselle komennolle. Esimerkiksi `ls` komennon näyttämistä tiedostonnimistä voi helposti hakea `grep`illä tiettyä tiedostoa putken avulla:

```
tunnus@hal9000:~/esimerkki$ ls
esimerkki.txt muistio2.txt muistio.txt
tunnus@hal9000:~/esimerkki$ ls | grep muistio
muistio2.txt
muistio.txt
```

Esimerkissä siis `ls`-komennon tulostus ohjattiin putken avulla edelleen komennolle `grep`. Ilman `|`-komentoa, ensimmäisen komennon tulostus olisi pitänyt ensin kirjoittaa tiedostoon ja sen jälkeen lukea ja filtteröidä `grep`illä. Komentoa `grep` käyttäen tulosteen pystyi suoraan jakamaan komentojen välillä. Joskus voi kuitenkin olla hyödyllistä kirjoittaa tuloste tiedostoon esimerkiksi tallennusta varten, sillä terminaalin tulosteita voi selata taaksepäin vain rajallisen määrän. Tähän tarkoitukseen sopiva operaattori on nuoli oikealle `>`, joka siirtää komennon tulosteen _tiedostoon_. Esimerkiksi `ls > listaus.txt` siirtää tiedostolistauksen `listaus.txt`-nimiseen tiedostoon, luoden kyseisen tiedoston jos sitä ei ole jo olemassa.

<div class="note">
Komento <code>></code> korvaa kohdetiedoston koko sisällön annetulla tekstillä, <code>>></code> lisää sen kohdetiedoston loppuun uudelle riville.
</div>

<div class="exercise">
<h3> <span class="points">5%</span> Tehtävä 10 </h3>
Luo tekstitiedosto <code>muistiinpanot.txt</code> komentorivillä. Kopioi sinne seuraava teksti, joka kuvailee erään opiskelijan ajatuksia tiettynä viikkona:
</div>
```
maanantai ohpe: Java on ohjelmointikieli
maanantai unicafe: Kalakeittoa
tiistai ohpe: Luokka voi toteuttaa rajapinnan
tiistai jtkt: Turingin testi on vaikea läpäistä
tiistai unicafe: Kanawokkia
keskiviikko ohpe: Java-ohjelmalla on oltava main-metodi
keskiviikko jtkt: Internet on iso paikka
keskiviikko unicafe: Papupataa
torstai unicafe: Hernekeittoa ja pannukakkua
torstai lapio: Komentorivi on musta laatikko
perjantai unicafe: Pitsaa
```
<div class="exercise">
Eriytä tämän jälkeen viikon ruokalista omaksi tiedostokseen <code>unicafe.txt</code>. Ruokalistoja ei tarvitse poistaa <code>muistiinpanot.txt</code>-tiedostosta. Eriytä myös kurssiin <code>ohpe</code> liittyvät muistiinpanot.

</div>

<h2> SSH-yhteys</h2>

Olemme tähän asti käyttäneet komentoriviä lähinnä omalla koneella olevien asioiden tarkasteluun. Komentoriviltä voidaan kuitenkin ottaa myös yhteys toiseen tietokoneeseen. SSH on salattu yhteystyyppi, joka mahdollistaa järjestelmään kirjautumisen etänä komentorivin kautta. Salattu yhteys tarkoittaa, että tietoa ei jaeta suoraan luettavassa muodossa: tarkoitus on, että vain valikoidut vastaanottajat pystyvät purkamaan salauksen ja lukemaan sisällön.

Unix-ympäristössä ssh-yhteyden voi luoda komennolla `ssh`. Komennon perustoiminnalisuus on seuraava: `ssh tunnus@palvelimen.osoite` ottaa yhteyden palvelimeen osoitteessa `palvelimen.osoite` ja yrittää kirjautua tunnuksella `tunnus`. Käyttäjältä pyydetään tunnuksen salasanaa, ja autentikoinnin onnistuessa yhteys avautuu. Tämän jälkeen komentoriviltä voidaan ajaa tavalliseen tapaan komentoja, mutta nykyinen kansio sijaitseekin palvelimella, johon yhteys on luotu.

Tietojenkäsittelytieteen osasto tarjoaa neljä eri palvelinta osaston koneisiin etäyhteyden luomiseksi. Näihin palvelimiin on pääsy opiskelijoilla, joilla on tietojenkäsittelytieteen osaston tunnus:

1.  melkki.cs.helsinki.fi
2.  melkinpaasi.cs.helsinki.fi
3.  shell.cs.helsinki.fi
4.  melkinkari.cs.helsinki.fi

Kaikki nämä palvelimet ohjaavat siis samaan käyttäjäkohtaiseen kotihakemistoon, johon pääsee kaikilta osaston koneilta. Kirjautuminen tapahtuu osaston käyttäjätunnuksilla.

Käytetään `ssh`-komentoa osaston koneelle yhteyden ottamiseen:

```
tunnus@hal9000:~$ ssh tunnus@melkki.cs.helsinki.fi
tunnus@melkki.cs.helsinki.fi's password:
```

<div class="note">Huomaa, että salasanaa kirjoittaessasi on normaalia, että komentoriville ei ilmesty tekstiä.</div>

Kun yhteys on muodostettu, näyttää komentorivi erilaiselta:

```
tunnus@melkki:~$
```

Nykyinen kansio on siis muuttunut osaston koneiden kotihakemistoksi ja pääset käsiksi kaikkiin osaston koneella sijaitseviin tiedostoihin. Yhteyden voi lopettaa komennolla `exit`.

<h2> SSH-avainpari</h2>

Äsken yhteys osaston koneeseen autentikoitiin osaston tunnuksilla. SSH-yhteys tarjoaa kuitenkin myös toisen tavan tunnistaa käyttäjä: julkinen ja yksityinen avainpari. Käytännössä avaimilla tarkoitetaan kahta pitkää ja satunnaiselta vaikuttavaa merkkijonoa, joita käytetään yhdessä varmistamaan, että vain halutuilla henkilöillä on pääsy tiettyyn tietoon. Kyseessä on salauksen tekniikka, joka ei kuulu sen enempää tämän kurssin aihealueisiin, mutta voit etsiä asiasta lisää tietoa avainsanoilla _public key encryption_ ja _asymmetric cryptography_. **Riittää ymmärtää, että yksityisen avaimen tulisi olla vain sen omistajan tiedossa, ja julkista avainta voi jakaa huoletta.**

SSH-avainparin voi luodan komennolla `ssh-keygen`. Komento kysyy salasanaa ja avaimen tallennuspaikkaa. Oletussijaintia tai tiedoston nimeä ei lähtökohtaisesti tarvitse muuttaa, jolloin avain luodaan kotihakemistossa sijaitsevaan `.ssh`-kansioon.

<div class="warning">Käytä SSH-avainta luodessasi aina salasanaa. Jos käytät SSH-avainta osaston palvelimien kanssa, on salasanan asettaminen pakollista yliopiston määräysten mukaan.</div>

```
tunnus@hal9000$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/tunnus/.ssh/id_rsa): /home/tunnus/.ssh/id_rsa_test
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/tunnus/.ssh/id_rsa.
Your public key has been saved in /home/tunnus/.ssh/id_rsa.pub.
The key fingerprint is:
The key's randomart image is:
```

Komento luo `.ssh`-kansioon kaksi tiedostoa, joista toisen pääte on `.pub`. Tämä `.pub`-päätteinen tiedosto sisältää julkisen avaimen, jonka voit turvallisesti jakaa muille, toinen tiedosto yksityisen avaimen, jota kannattaa kohdella samalla varovaisuudella kuin tavallista salasanaa.

Avainparilla kirjautuminen on mahdollista, kun julkinen avain lisätään halutulle palvelimelle. Tällöin kyseiseen järjestelmään pääsee kirjautumaan, jos tietää julkista avainta vastaavan yksityisen avaimen. Lisätään siis `.pub`-päätteisen tiedoston sisältö yliopiston kotihakemiston polkuun `~/.ssh/authorized_keys`, siis kansioon `.ssh`, tiedostoon nimeltä `authorized_keys`.

Autentikaatio toimii oikein, kun otettaessa SSH-yhteyttä yliopiston koneisiin pääsee kirjautumaan SSH-avaimelle antamalla salasanalla.

Jotta et joudu kirjoittamaan salasanaa joka kerralla, kannattaa yksityinen avain lisätä ssh-agentille, jolloin salasana tarvitsee kirjoittaa vain kirjauduttuasi järjestelmästä ulos. Tämä tapahtuu kahdella komennolla:

```
eval `ssh-agent` # varmistetaan, että ssh-agentti on toimintavalmiudessa
ssh-add ~/.ssh/id_rsa # olettaen, ettet muuttanut yksityisen avaimen polkua sitä luodessasi, muuten käytä valitsemaasi polkua.
```

Huomaa siis, että agentille lisätyllä avaimella ei ollut `.pub`-päätettä, se on siis yksityinen!

`ssh`-komento kannattaa ajaa vivuilla `-t rsa -b 4096`. Ne varmistavat, että käytetty salausalgoritmi on [RSA](<https://en.wikipedia.org/wiki/RSA_(cryptosystem)>) ja että avaimesta tulee 4096 bittiä pitkä. Pitempi pituus tekee RSA:lla luodusta avaimesta turvallisemman.

Voit lukea lisää `ssh`-komennosta ja sen konfiguroimisesta esimerkiksi [täällä](https://linux.fi/wiki/SSH)

<div class="exercise">
<h3><span class="points">10%</span> Tehtävä nro 11</h3>

Luo koneellesi SSH-avainpari. Jos olet tietojenkäsittelytieteen läsnäoleva pää- tai sivuaineopiskelija, ja sinulla on tietojenkäsittelytieteen osaston käyttäjätunnus, mahdollista avainparilla kirjautuminen yliopiston palvelimille SSH-yhteyttä luodessa. Testaa sen jälkeen avainparia.

</div>

<h2> Wget</h2>

Graafisessa ympäristössä selain antaa tarkastella sivuja internetissä. Komentorivillä toimivien ohjelmien on vaikeaa näyttää internet-sivuja samoin kuin graafinen selain, ([joskin se on mahdollista](https://en.wikipedia.org/wiki/Text-based_web_browser)) mutta pohjimmiltaan nettisivu internetissä on vain tiedosto, jonka voimme toki ladata koneellemme tarkasteltavaksi.

Tarvittavan komennon nimi on `wget` (alunperin _world wide web get_), ja se toimii yksinkertaisimmillaan `wget sivun.osoite`, joka lataa annetun sivun koneellesi. Internet-sivut on tehty HTML-kielellä, johon tutustumme seuraavalla viikolla, joten saat kutsun tuloksena koneellesi `.html`-päätteisen tiedoston.

<div class="exercise">
<h3><span class="points">10%</span> Tehtävä nro 12</h3>

Lataa mieleisesi sivusto koneellesi <code>wget</code>-komennolla, ja avaa tallennettu <code>.html</code>-päätteinen tiedosto selaimella, esim Firefoxilla tai Chromella (saat tiedoston helpoiten selaimella auki graafisesta tiedostonhallinnasta). Sivu näyttää luultavasti hieman erilaiselta kuin yleensä. Avaa sitten tiedosto niin, että näet sen sisällä olevan HTML-koodin (toisin sanoen avaa se niin, että näet tiedoston sisällön koodina, eikä tiedosto aukea selaimessa). Tutustumme HTML-kieleen kolmannessa osassa.

</div>

<div class="exercise">
<h3> <span class="points">10%</span> Tehtävä nro 13</h3>

<p>
Hae wgetillä Linus Torvaldsista kertova <a href="https://en.wikipedia.org/wiki/Linus_Torvalds">Wikipedia-artikkeli</a> koneellesi. Tarkista sen jälkeen <code>grep</code>-komentoa käyttäen, kuinka monella rivillä esiintyy sana "Linux". Kirjoita nämä rivit tiedostoon.
</p>

<p>
Etsi sitten netistä, miten voit laskea tulosteen rivien määrät, ja laske monellako rivillä sana "Linux" esiintyy.
</p>

Bonustehtävä: Tee sama operaatio, mutta älä kirjoita mitään välissä tiedostoon.

</div>

<h2> Oikeudet</h2>

Unix-tyyppisissä järjestelmissä käyttäjät omaavat tiettyjä oikeuksia tiedostojen ja kansioiden muokkaamista ja katsomista varten. Esimerkiksi jos useampi ihminen käyttää samaa järjestelmää, kuten osaston koneita käytetään, on tarve määrittää mitä kukakin käyttäjä pystyy lukemaan, kirjoittamaan ja suorittamaan.

Lukuoikeus antaa käyttäjän tarkastella tiedoston sisältöä, kun taas kirjoitusoikeuden omaava käyttäjä pystyy muokkaamaan sitä. Suoritusoikeus taas tarkoittaa, että jos kyseinen tiedosto on esimerkiksi ohjelma, on se mahdollista ajaa. Kansioilla on oltava suoritusoikeus, jotta niiden sisään voidaan siirtyä esimerkiksi `cd`-komennolla.

Jokaisella tiedostolla ja kansiolla on omat oikeutensa. Lisäksi niillä on myös omistaja. Käyttäjä, joka loi tiedoston, on oletuksena sen omistaja (joskin omistajuutta voi myös vaihtaa).

Oikeudet ja omistajuudet selviävät `ls`-komennon `-l`-vivun avulla. Tältä näyttävää komennon tuloste "esimerkki"-kansiolla:

```
tunnus@hal9000:~/esimerkki$ ls -l
total 8
-rw-r--r-- 1 tunnus tunnus 16 touko 31 21:41 esimerkki.txt
-rwxr--r-- 1 tunnus tunnus 0 kesä 14 17:25 muistio.txt
-r--r--r-- 1 tunnus tunnus 0 touko 3 23:13 artikkeli.txt
drwx------ 2 tunnus tunnus 130 kesä 14 17:54 päiväkirjamerkinnät
```

Ensimmäinen sarake, joka sisältää hassuja sekoituksia kirjaimista ja merkeistä on kyseisen tiedoston oikeudet kertova merkkijono. Tässä sen ensimmäinen merkki on joko `d` tai `-`, joka kertoo onko kyseessä tiedosto (`-`) vai kansio, eli **d**irectory.

Seuraavat yhdeksän merkkiä on varattu tiedoston tai kansion oikeuksille. Nämä oikeudet merkitään aina järjestyksessä lukuoikeus (r), kirjoitusoikeus (w) ja suoritusoikeus (x). Ensimmäiset kolme merkkiä kertovat sen omistajan oikeudet. Jos vastaavan kirjaimen tilalla on viiva, tarkoittaa merkintä, että oikeus puuttuu, eli sitä ei ole annettu.

Seuraavat kolme merkkiä kertovat samaan tapaan _ryhmän_ oikeudet. Ryhmä on tapa, jolla samanlaisia käyttäjiä voi hallita - esimerkiksi kaikki opiskelijat saattaisivat olla osaston järjestelmissä yhdessä ryhmässä, jotta ryhmälle voidaan antaa tiettyjä oikeuksia. Viimeiset kolme merkkiä taas näyttävät kaikkien muiden käyttäjien oikeudet.

Oikeuksien jälkeen näkyy kansioon johtavien linkkien määrä: Tiedostoilla tämä luku on yksi, ja tyhjillä kansioilla kaksi. Kansioissa linkkien lukumäärään sisältyy myös sen sisältämät tiedostot. Emme käsittele linkkejä enempää, eikä niistä kysytä tentissä. Voit etsiä linkeistä tietoa esimerkiksi sanoilla "Hard and soft links in Unix".

Sen jälkeen on tiedoston omistajan nimi ja ryhmän nimi. Tässä tapauksessa ryhmän nimi on käyttäjänimi `tunnus`. Viimeisenä tulostuksessa näkyy kansion tai tiedoston koko [tavuina](<https://fi.wikipedia.org/wiki/Tavu_(tietotekniikka)>), sekä viimeinen muokkauspäivä, ja lopuksi sen nimi.

Yllä näkyvässä esimerkissä siis `muistio.txt`-tiedostolle on omistajalla luku, kirjoitus ja ajo-oikeus, ryhmällä ja muilla taas on lukuoikeus. Kansiolla `päiväkirjamerkinnät` taas on vain sen omistajalle luku, muokkaus ja ajo-oikeudet, eikä ryhmällä tai muilla käyttäjillä ole näitä oikeuksia. Tiedostoa `artikkeli.txt` voivat kaikki lukea, mutteivät muokata tai ajaa.

Oikeuksia voi muuttaa tiedoston tai kansion omistaja, tai järjestelmän ylläpitäjä. Niiden muokkaamiseen komentoriviltä tarkoitettu komento on `chmod` (_change mode_). Se ottaa argumenttina merkkijonon, joka kertoo lisätäänkö vai poistetaanko oikeuksia, kenelle oikeuksia annetaan, sekä tiedoston tai kansion jolle komento tulee suorittaa.

Annettu oikeus ja sen saaja määritellään kirjainten avulla:

- r = lukuoikeus
- w = kirjoitusoikeus
- x = ajo-oikeus
- u = tiedoston omistaja
- g = ryhmään kuuluvat
- o = kaikki muut käyttäjät

Jos oikeuden saajaa ei määritellä, chmod antaa kyseisen oikeuden kaikille käyttäjäryhmille (käyttäjälle, ryhmälle ja muille).

`-` argumentti poistaa oikeuden, ja `+` antaa oikeuksia.

Esimerkkejä `chmod`in käytöstä:

`chmod u+x esimerkki.txt` antaa tiedoston omistajalle oikeuden ajaa tiedosto.

`chmod o-w esimerkki.txt` poistaa muilta käyttäjiltä oikeuden kirjoittaa tiedostoon.

`chmod go+r esimerkki.txt` antaa ryhmälle ja muille käyttäjille oikeuden lukea tiedoston.

```
tunnus@hal9000:~/esimerkki$ chmod -r esimerkki.txt
tunnus@hal9000:~/esimerkki$ cat esimerkki.txt
cat: esimerkki.txt: Permission denied
tunnus@hal9000:~/esimerkki$ chmod +r esimerkki.txt
tunnus@hal9000:~/esimerkki$ cat esimerkki.txt
paras
esimerkki
tunnus@hal9000:~/esimerkki$ chmod o+w esimerkki.txt
tunnus@hal9000:~/esimerkki$ ls -l
total 8
-rw-r--rw- 1 tunnus tunnus 16 touko 31 21:41 esimerkki.txt
-rw-r--r-- 1 tunnus tunnus 0 kesä 14 17:25 muistio2.txt
-rw-r--r-- 1 tunnus tunnus 0 touko 3 23:13 muistio.txt
drw-r--r-- 1 tunnus tunnus 130 kesä 14 17:54 päiväkirjamerkinnät
```

<div class="exercise">
<h3> <span class="points">10%</span> Tehtävä 14</h3>

Luo tiedosto <code>oikeus.txt</code> ja harjoittele sen avulla oikeuksien hallinnointia. Anna sille vuorotellen seuraavanlaiset oikeudet:

</div>
```
-rwxr--r--
-rw-r--r--
-rw-------
-r-xrw--w-
```

Voit lukea lisää oikeuksista esimerkiksi [täältä](https://csguide.cs.princeton.edu/account/groups).

<h2>Skriptit</h2>

Skriptit (englanniksi _scripts_) ovat tiedostoja, jotka sisältävät komentorivillä ajettavaa koodia. Niitä käytetään paljon erilaisten tietokoneella tehtävien tehtävien automatisoinnissa. Skriptin voi ajaa kirjoittamalla terminaaliin sen polun. Jos ollaan skriptin kanssa samassa kansiossa, voidaan se ajaa komennolla `./skriptin_nimi`.

Skriptien kirjoittamiseen on olemassa niille tarkoitettuja ohjelmointikieliä. Yksi niistä on [Bash](<https://en.wikipedia.org/wiki/Bash_(Unix_shell)>). Se on Unix-käyttöjärjestelmien komentorivien oletustulkki, eli esimerkiksi Linuxin versioissa ja macOSissa voidaan oletuksena ajaa Bashilla kirjoitettuja skriptejä. Bash-skriptin aluksi tulee kirjoittaa seuraavanlainen taikarivi: `#!/bin/bash`. Skriptitiedostojen nimet myös yleensä lopetetaan päätteellä `.sh`.

Skripteihin voi kirjoittaa myös komentorivin ohjelmakomentoja. Esimerkiksi seuraavanlainen skirpti:

```
ls
```

tekee ajettaessa juuri, mitä sen sisältämä komento käskee:

```
hal9000:~ tunnus$ ./script.sh
Applications	Library		      Pictures	      kissakuvia
Desktop		    Linus_Torvalds	Public          script.sh
Documents	    Movies	        Downloads	Music
```

Huomaa kuitenkin, että jotkin asiat toimivat skripteissä eri tavalla kuin olettaisi. Esimerkiksi `cd`-komento ei toimi sellaisenaan.

Jotta skriptin voi ajaa, käyttäjälle tulee ensin antaa siihen ajo-oikeudet komennolla `chmod`.

<div class="exercise">
<h3><span class="points">5%</span> Tehtävä nro 15</h3>

Etsi netistä, miten <code>bash</code>issä voi tulostaa tekstiä terminaaliin. Kirjoita sen jälkeen skripti, joka tulostaa "Hello world!". Selvitä sen jälkeen, miksi yleensä ensimmäisessä ohjelmointitehtävässä tulostetaan teksti "Hello world!". Aja lopuksi kirjoittamasi skripti.

</div>

<div class="warning">
Ole varovainen oikeuksien kanssa! Liiallisten oikeuksien antaminen esimerkiksi kotihakemistoosi on turvallisuusuhka. Useimmiten tarvitset ajo- ja lukuoikeuksia vain itse.
</div>

<h2> Sudo</h2>

Tietoturvallisiin tapoihin kuuluu, että tietokoneessa erotellaan pääkäyttäjä (_superuser_) sekä tavalliset käyttäjät. Pääkäyttäjällä on kaikki oikeudet järjestelmään, ja kaikki pääkäyttäjän ajamat ohjelmat ajetaan etuoikeutetussa tilassa. Tämä voi olla vaarallista, jos pahantahtoista koodia päätyy ajoon, siksi tietokonetta tulee käyttää yleensä normaalina käyttäjänä. Normaali käyttäjä voi kuitenkin ajaa komentoja pääkäyttäjänä, jos tuntee sen salasanan. Tämä tapahtuu lisäämällä komennon alkuun `sudo` (alunperin _superuser do_). Tällöin ennen komennon ajamista käyttäjältä pyydetään pääkäyttäjän salasana. Riippuen järjestelmästä, `sudo`-oikeuksia voidaan tarvita esimerkiksi ohjelmien asentamiseen. Komennon käyttöä tulee kuitenkin välttää, jos mahdollista.

Yliopiston tai osaston koneilla, eli niillä joihin kirjaudut yliopiston tai osaston tunnuksilla esimerkiksi SSH-yhteyden kautta tai pajaluokissa, **ei saa ajaa mitään sudo-komentoja** - siitä lähtee ylläpidolle väärinkäyttöilmoitus.

<div class="warning">Älä esimerkiksi kopioi netistä komentoa, joka alkaa sanalla sudo, jos et ymmärrä mitä se tekee. Annat tällöin ajettaville ohjelmille täydet valtuudet järjestelmässäsi.</div>

<h2> Asentamisesta</h2>

Helpoiten komentorivityökalujen asentaminen tapahtuu pakettienhallintajärjestelmien avulla. Tällaisia ovat esimerkiksi apt-get (Linux) tai homebrew (macOS). Ubuntussa (osaston koneilla käytettävä Linuxin versio) pitäisi olla apt-get valmiina, macOSissa joudut asentamaan homebrew:n erikseen [täältä](https://brew.sh/). Ohjeita apt-getin käyttöön löytyy [täältä](https://help.ubuntu.com/community/AptGet/Howto). **Suosittelemme vahvasti pakettienhallintajärjestelmän käyttämistä.**

Ohjelman asentaminen ilman pakettienhallintajärjestelmää sisältää usein `PATH`-nimisen _ympäristömuuttujan_ muokkaamista. Ympäristömuuttujien avulla voidaan määritellä järjestelmäkohteinen ympäristö. Käytännössä tämä tarkoittaa arvojen määrittelemistä koko järjestelmän laajuisille muuttujille. [`PATH`-muuttujaan](<https://en.wikipedia.org/wiki/PATH_(variable)>) määritellään, missä tietokoneessa sijaitsee suoritettavat ohjelmat, jolloin niihin voidaan viitata komennoilla tarkan sijainnin sijaan. Voit lukea ympäristömuuttujista lisää esimerkiksi [täältä](https://www.tutorialspoint.com/unix/unix-environment.htm).

Järjestelmän ympäristö voidaan määritellä skripteissä niin, että niitä ei tarvitse erikseen määritellä session loputtua. Tällaisia on esimerkiksi `~/.bashrc`, joka ajetaan joka kerta, kun terminaali käynnistetään ja `~/bash_profile`, joka ajetaan jokaisella kirjautumisella. Voit lukea näistä tiedostoista ja niiden käytöstä muun muassa [täältä](http://www.joshstaiger.org/archives/2005/07/bash_profile_vs.html). Esimerkiksi `PATH` määritellään yleensä `.bashrc`-tiedostoon.

<h2> Loppusanat</h2>

Tähän päättyy kurssin ensimmäinen viikko. Komentorivin opettelussa voi mennä aikaa, mutta ajan kanssa uuteen työkaluun tottuu. Unix-yhteisö tarjoaa paljon apuja internetissä: Linuxille on muun muassa wiki-sivut [linux.fi](https://www.linux.fi/wiki/Etusivu), sekä Unixille foorumi [Stack Exchangessa](https://unix.stackexchange.com/). MacOSille on olemassa käyttäjäystävällinen virallinen dokumentaatio, sekä myös oma [foorumi](https://discussions.apple.com/welcome).

Komentorivin peruskäyttö kannattaa opetella, vaikka se tuntuisi aluksi turhalta: osaathan samat asiat jo graafisessa ympäristössä. Monen mielestä komentorivillä toimiminen on koodatessa lopulta nopeampaa, kun välissä ei tarvitse käyttää hiirtä, ja yleensä koodatessa käytettäville ohjelmille on olemassa komentoriviohjelma. Tällöin graafisen selaimen avaaminen tiedoston kopioimiseksi voi oikeasti vain hidastaa. Loppujen lopuksi kyse on tietenkin tottumisesta ja mielipiteistä.

Pidä nyt pieni tauko: voit taputtaa itseäsi selkään, sait käytyä ensimmäisen osan läpi! Palaa sen jälkeen tämän sivun alusta löytyviin oppimistavoitteisiin, ja selvitä itsellesi, mitkä aiheet tarvitsevat vielä kertausta.

Tämä viikko toimi esittelynä komentoriviin. Komentorivi tarjoaa kuitenkin vielä paljon erilaisia työkaluja ja komentoja, joita ei tässä käyty läpi. Tulet oppimaan ne tulevilla kursseilla sitä mukaan kuin niitä tarvitset. Alla vielä listaus hyödyllisistä komennoista, joihin kannattaa ehkä tutustua, vaikkei niitä käyty tässä läpi:

- `scp`: kopiointi verkon yli
- `watch`: toista komentoa teityin väliajoin
- `&& tai ;`: ketjuta komentoja peräjälkeen
- `alias`: määrittele komennoille aliaksia, joiden avulla voit kutsua niitä esimerkiksi nopeammin.
- `&`: kirjoittamalla merkin komennon loppuun sen aloittama prosessi jää taustalle, eikä lukitse komentoriviä
- `history`: tarkastele komentohistoriaa
- `Ctrl + r`: etsi komentoja omasta historiasta hakusanoilla
